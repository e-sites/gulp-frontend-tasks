{
	// Settings
	"passfail"      : false, // Stop on first error.
	"maxerr"        : 50,    // Maximum error before stopping.

	// Predefined globals whom JSHint will ignore.
	"browser"       : true,  // Standard browser globals e.g. `window`, `document`.
	"couch"         : false,
	"dojo"          : false,
	"jquery"        : true,
	"mootools"      : false,
	"node"          : false,
	"prototypejs"   : false,
	"rhino"         : false,
	"wsh"           : false,

	// Custom globals.
	"predef"        : [
		"app",
		"define",
		"require"
	],

	// Development.
	"debug"         : false, // Allow debugger statements e.g. browser breakpoints.
	"devel"         : false, // Allow developments statements e.g. `console.log();`.

	// The Good Parts.
	"asi"           : false, // Tolerate Automatic Semicolon Insertion (no semicolons).
	"bitwise"       : false, // Prohibit bitwise operators (&, |, ^, etc.).
	"boss"          : true,  // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
	"curly"         : true,  // Require {} for every new block or scope.
	"eqeqeq"        : true,  // Require triple equals i.e. `===`.
	"eqnull"        : true,  // Tolerate use of `== null`.
	"evil"          : false, // Tolerate use of `eval`.
	"expr"          : false, // Tolerate `ExpressionStatement` as Programs.
	"forin"         : false, // Tolerate `for in` loops without `hasOwnPrototype`.
	"immed"         : true,  // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
	"latedef"       : false, // Prohibit variable use before definition.
	"laxbreak"      : false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
	"loopfunc"      : false, // Allow functions to be defined within loops.
	"noarg"         : true,  // Prohibit use of `arguments.caller` and `arguments.callee`.
	"regexdash"     : true,  // Tolerate unescaped last dash i.e. `[-...]`.
	"regexp"        : false, // Prohibit `.` and `[^...]` in regular expressions.
	"scripturl"     : false, // Tolerate script-targeted URLs.
	"shadow"        : false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
	"supernew"      : false, // Tolerate `new function () { ... };` and `new Object;`.
	"undef"         : true, // Require all non-global variables be declared before they are used.

	// Personal styling preferences.
	"camelcase"     : true,
	"eqeqeq"        : true,
	"eqnull"        : false,
	"evil"          : false,
	"expr"          : false,
	"forin"         : true,
	"globalstrict"  : false,
	"immed"         : true,
	"indent"        : 4,
	"laxcomma"      : false, // Suppresses warnings about comma-first coding style
	"newcap"        : true,  // Require capitalization of all constructor functions e.g. `new F()`.
	"noempty"       : true,  // Prohipit use of empty blocks.
	"nomen"         : false, // Prohibit use of initial or trailing underbars in names.
	"nonew"         : true,  // Prohibit use of constructors for side-effects.
	"onecase"       : false, // Suppresses warnings about switches with just one case
	"onevar"        : false, // Allow only one `var` statement per function.
	"plusplus"      : false, // Prohibit use of `++` & `--`.
	"quotmark"      : "single", // Single quotes only
	"shadow"        : true,  // Suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared
	"smarttabs"     : false, // Suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only
	"sub"           : false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
	"strict"        : true,  // Requires all functions to run in EcmaScript 5's strict mode
	"trailing"      : true,  // Prohibit trailing whitespaces.
	"unused"        : true,  // Warns when you define and never use your variables
	"white"         : false  // Check against strict whitespace and indentation rules.
}